<%= stylesheet_link_tag "quizes", media: "all", 'data-turbo-track': 'reload' %>
<%= javascript_include_tag "quizes", 'data-turbo-track': 'reload' %>
<% max_questions = 20 %>
<% @quizData = @quizData.take(max_questions) %>
<% @total_count = @quizData.length %>
<div class="row d-flex justify-content-center align-items-center ">
  <div class="col-xl-8">
    <% if @total_count < 5 %>
      <div class="alert alert-warning">
        You need at least 5 questions to start the quiz.
      </div>
    <% else %>
      <% @quizData.each_with_index do |data, index| %>
        <% @dataOption = data.nation_vocab["EN"] %>
        <% correct_answer = @dataOption.join(", ") %>
        <% incorrect_answers = @quizData.map { |d| d.nation_vocab["EN"] }.flatten.uniq - @dataOption %>
        <% shuffled_options = ([correct_answer] + incorrect_answers.sample(3)).shuffle %>
        
        <div class="card card-body mb-1 rounded-3 p-md-5 mx-md-4 text-black" style="margin-top: 5%">
          <div class="text-start ms-20">
            <div class='text-end'><h4><%= "Question #{index+1} of #{@total_count}" %></h4></div>
            <form id="quiz-form-<%= index %>" action="" method="POST">
              <%= hidden_field_tag :authenticity_token, form_authenticity_token %>  
              <div class="d-flex">
                <h3 style="user-select: none;">
                <%= "#{index + 1}. What is the meaning of #{data.vocab_code}" %>
                <%= content_tag :span, "(#{data.vocab_read})", class: "hiraText d-none" %> <br />
                </h3>
              </div>
              <div class="pt-2">
                <% shuffled_options.each_with_index do |option, option_index| %>
                  <label class="options radiocontainer">
                    <input type="radio" name="answer_<%= index %>" value="<%= option %>" class="quiz-option " data-correct="<%= correct_answer %>" />
                    <%= option %>   
                    <span class="checkmark"></span>
                  </label>
                <% end %>
              </div>

              <!-- Add the hidden input field here -->
              <div class="pt-3 d-flex">
                <%= hidden_field_tag "vocab_org_#{index}", data.vocab_org %>
                <div class="d-flex gap-2">
                  <%= link_to 'Next', quizes_path , class: 'btn btn-primary next-question', remote: true %>
                  <%# <div class="timer">
                      <div class="time_left_txt">Time Left</div>
                      <div class="timer_sec">15</div>
                  </div> %>
                  <div class="time_line"></div>
                  <div class="text-end timer" id="timer">
                    <h6 class="time_left_txt">Time left</h6>
                    <h6 class="timer_sec " id="time">00</h6>
                    <%# <h6 id="time" >5</h6>%>
                  </div>
                </div>
              </div>
            </form>
          </div>
        </div>
      <% end %>

      <!-- Your result view -->
      <div class="card card-body result-container" style="margin-top: 10%" >
      </div>
    <% end %>
    
  </div>
</div>
<script>

  $(document).ready(function() {


    $(".result-container").hide();
    const options = document.querySelectorAll('.quiz-option');
    const firstClickedOptions = [];
    var totalCorrectAnswer = 0;
    var totalCountOfQuestion = <%= @total_count %>;
    var currentIndex = '';
    var indexParam = <%= params[:index].to_i %>;
    var totalQuestions = <%= @quizData.length %>;

    if(!indexParam){
      currentIndex = <%= params[:index].to_i %>;
    }else{
      currentIndex = 0;
    }
    
    options.forEach((option) => {
      firstClickedOptions[currentIndex] = ''; // Initialize to empty string
      option.addEventListener('change', function() {
        
        if (!firstClickedOptions[currentIndex]) {
          firstClickedOptions[currentIndex] = $("input[name='answer_" + currentIndex + "']:checked").val();
        }

        const selectedOption = this.value;
        const correctAnswer = this.getAttribute('data-correct');
        const vocabReadSpan = this.closest('.card').querySelector('.hiraText');
        vocabReadSpan.classList.remove('d-none');
        
        if (selectedOption === correctAnswer) {
          this.parentElement.classList.remove('text-danger');
          this.parentElement.classList.add('text-success');
        } else {
          this.parentElement.classList.remove('text-success');
          this.parentElement.classList.add('text-danger');
        }
      });
    });
    
    $(".next-question").click(function() {
      clearInterval(interval);
      triggerNextQuestion();
    });

    function triggerNextQuestion() {

      var vocabOrg = $("input[name='vocab_org_" + currentIndex + "']").val();
      var correctOption = $("input[name='answer_" + currentIndex + "']").data("correct");
      var selectedOption = firstClickedOptions[currentIndex];
      if(!selectedOption){
        selectedOption = "";
      }
      var mycardLevel = selectedOption === correctOption ? 1 : 0;
      if(mycardLevel == 1){
        totalCorrectAnswer = totalCorrectAnswer + 1;
      }

      $.ajax({
        url: '<%= url_for(action: :next_ques) %>',
        dataType: 'json',
        method: 'post',
        data: {
          authenticity_token: '<%= form_authenticity_token %>',
          vocab_org: vocabOrg,
          index: currentIndex,
          mycard_level: mycardLevel,
          correct_option: correctOption,
          selected_answer: selectedOption
        },
        success: function(data) {
        },
        error: function(xhr, status, error) {
          alert('An error occurred while submitting your answer');
        }
      });

    currentIndex++;
    if (currentIndex < totalQuestions) {
      // countDownTimer(); // Reset and start timer for the new question
      showQuestion(currentIndex);
      // interval = setInterval(countDown, 1000);
      // timer = 5;

    }else{
        
        btnSubmit(currentIndex);
      }
    };

    function btnSubmit(currentIndex)  {

      $(".card").hide();

      var resultContainer = $(".result-container");
      resultContainer.show();
      
      var percentage_level_1 = (totalCorrectAnswer / totalCountOfQuestion) * 100;
      var roundedPercentage = parseFloat(percentage_level_1.toFixed(0));

      var msgForStudy = '';

      switch (true) {
          case roundedPercentage < 25:
              msgForStudy = "You scored below 25%. Keep practicing!";
              break;
          case roundedPercentage < 50:
              msgForStudy = "You scored between 25% and 50%. Keep working on it!";
              break;
          case roundedPercentage < 75:
              msgForStudy = "You scored between 50% and 75%. You're making progress!";
              break;
          case roundedPercentage < 90:
              msgForStudy = "You scored between 75% and 90%. Great job!";
              break;
          case roundedPercentage <= 100:
              msgForStudy = "You scored 90% or above. Excellent work!";
              break;
          default:
              msgForStudy = "Invalid percentage. Please check your inputs.";
              break;
      }

      var content = '<div class="Content-result" style="text-align:center">';
      content += '<h1>Result:</h1>';
      content += totalCorrectAnswer + ' of ' + <%= @total_count %> + '<p><b>' + roundedPercentage + '%</b></p>';
      content += '<p>'+ msgForStudy + '</p>';
      content += '<%= link_to 'Try Again', quizes_path, class: 'btn btn-primary ' %>   ';
      content += '<%= link_to 'Back', menus_path, class: 'btn btn-primary' %>';
      content += '</div>';

      resultContainer.html(content);
    };

    showQuestion(currentIndex);
    function showQuestion(index) {
      $(".card").hide();
      $(".card:eq(" + index + ")").show();
    };

    // let counter = 5;

    // let time = document.querySelector("#time");
    // let index = 0;
    // let timer = 5;
    // let interval = 0;

    // let countDown = ()=>{
    //   if(timer === 0){
    //     clearInterval(interval);
    //     triggerNextQuestion();
    //   }else{
    //     timer--;
    //     time.innerText = timer;
    //     console(timer)
    //  }
    // };

    // setInterval(countDown, 1000);


  

    // countDownTimer();

    // function countDownTimer(){
    
    

    //   let countDown = setInterval(function() {
    //     // Display 'counter' wherever you want to display it.
    //     if (counter <= 0) {
    //       clearInterval(inerval);          
    //       triggerNextQuestion();          
    //     } else {
    //       document.querySelector('#timees').innerHTML = counter;
    //     }
    //     counter--;
    //   }, 1000);

    // };
    

    // let time = document.querySelector("#timees");
    // let index = 0;
    // let timer = 5;
    // let interval = 0;

    // let countDown = ()=>{
    //   if(timer === 0){
    //     clearInterval(interval);
    //     triggerNextQuestion();
    //   }else{
    //     timer--;
    //     document.querySelector('#timees').textContent = timer;

    //  }
    // };

    // setInterval(countDown, 1000);


    const time_line = document.querySelector(".time_line");
    const timeText = document.querySelector(".timer .time_left_txt");
    const timeCount = document.querySelector(".timer .timer_sec");

    let timeValue =  15;
    let que_count = 0;
    let que_numb = 1;
    let userScore = 0;
    let counterTime;
    let counterLine;
    let widthValue = 0;
    
    startTimer(timeValue); //calling startTimer function
    startTimerLine(widthValue); //calling startTimerLine function
    timeText.textContent = "Time Left"; //change the text of timeText to Time Left

    function startTimer(time){
        counterTime = setInterval(timer, 1000);
        function timer(){
            timeCount.textContent = time; //changing the value of timeCount with time value
            time--; //decrement the time value
            if(time < 9){ //if timer is less than 9
                let addZero = timeCount.textContent; 
                timeCount.textContent = "0" + addZero; //add a 0 before time value
            }
            if(time < 0){ //if timer is less than 0
                clearInterval(counterTime); //clear counter
                timeText.textContent = "Time Off"; //change the time text to time off
                const allOptions = option_list.children.length; //getting all option items
                let correcAns = questions[que_count].answer; //getting correct answer from array
                for(i=0; i < allOptions; i++){
                    if(option_list.children[i].textContent == correcAns){ //if there is an option which is matched to an array answer
                        option_list.children[i].setAttribute("class", "option correct"); //adding green color to matched option
                        option_list.children[i].insertAdjacentHTML("beforeend", tickIconTag); //adding tick icon to matched option
                        console.log("Time Off: Auto selected correct answer.");
                    }
                }
                for(i=0; i < allOptions; i++){
                    option_list.children[i].classList.add("disabled"); //once user select an option then disabled all options
                }
                next_btn.classList.add("show"); //show the next button if user selected any option
            }
        }
    }

    function startTimerLine(time){
        counterLine = setInterval(timer, 29);
        function timer(){
            time += 1; //upgrading time value with 1
            time_line.style.width = time + "px"; //increasing width of time_line with px by time value
            if(time > 549){ //if time value is greater than 549
                clearInterval(counterLine); //clear counterLine
            }
        }
    }
    });

  
</script>

<%= stylesheet_link_tag "quizes", media: "all", 'data-turbo-track': 'reload' %>
<% max_questions = 20 %>
<% @quizData = @quizData.take(max_questions) %>
<% @total_count = @quizData.length %>

<div class="row d-flex justify-content-center align-items-center ">
  <div class="col-xl-8">
    <% if @total_count < 5 %>
      <div class="alert alert-warning">
        You need at least 5 questions to start the quiz.
      </div>
    <% else %>
      <% @quizData.each_with_index do |data, index| %>
        <% if current_user.lang_id != 'JP' %>
        <% @dataOption = data.vocab_table.vocab_nations.where(lang: current_user.lang_id).first %>
          <% correct_answer = @dataOption&.nation_code %>
          <% incorrect_answers = @quizData.map { |d| d.vocab_table.vocab_nations.where(lang: current_user.lang_id).first&.nation_code }.flatten.uniq - [correct_answer] %>
        <% else %>
        <% @dataOption = data.vocab_table %>
          <% correct_answer = @dataOption.vocab_read %>
          <% incorrect_answers = @quizData.map { |d| d.vocab_table.vocab_read }.flatten.uniq - [correct_answer] %>
        <% end %>
          <% shuffled_options = ([correct_answer] + incorrect_answers.sample(3)).shuffle %>

          <div class="card card-body mb-1 rounded-3 p-md-5 mx-md-4 text-black" style="margin-top: 5%">
            <div class="text-start ms-20">
              <div class='text-end'>
                <h5>
                  <%= "Question #{index+1} of #{@total_count}" %>
                </h5>
              </div>
              <form id="quiz-form-<%= index %>" action="" method="POST">
                <%= hidden_field_tag :authenticity_token, form_authenticity_token %>
                <div class="d-flex">
                  <h3 style="user-select: none;">
                    <%= "#{index + 1}. What is the meaning of #{data.vocab_table.vocab_code}" %>
                    <%= content_tag :span, "(#{data.vocab_table.vocab_read})", class: "hiraText d-none" %>
                  </h3>
                </div>
                <div class="progress">
                  <div class="progress-bar progress-bar-animated bg-success" role="progressbar" style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100">
                    <span id="countdown_<%= index %>">20</span>
                  </div>
                </div>
                <div class="pt-2">
                  <% shuffled_options.each_with_index do |option, option_index| %>
                    <label class="options radiocontainer">
                      <input type="radio" name="answer_<%= index %>" value="<%= option %>" class="quiz-option" data-correct="<%= correct_answer %>" />
                      <%= option %>
                      <span class="checkmark"></span>
                    </label>
                  <% end %>
                </div>

                <!-- Add the hidden input field here -->
                <div class="pt-3">
                  <%= hidden_field_tag "id_#{index}", data.vocab_table.id %>
                  <div class="d-flex gap-2">
                    <%= link_to 'Next', quizes_path , class: 'btn btn-primary next-question', remote: true %>
                  </div>
                </div>
              </form>
            </div>
          </div>
      <% end %>
      <div class=" card card-body result-container" style="margin-top: 10%"></div>
    <% end %>
  </div>
</div>
<!-- Your result view -->
<script>

  $(document).ready(function() {
    $(".result-container").hide();
    const options = document.querySelectorAll('.quiz-option');
    const firstClickedOptions = [];
    var totalCorrectAnswer = 0;
    var totalCountOfQuestion = <%= @total_count %>;
    var currentIndex = '';
    var indexParam = <%= params[:index].to_i %>;
    var totalQuestions = <%= @quizData.length %>;

    if(!indexParam){
      currentIndex = <%= params[:index].to_i %>;
    }else{
      currentIndex = 0;
    }
    var countdownInterval;

    options.forEach((option) => {
      firstClickedOptions[currentIndex] = ''; // Initialize to empty string
      option.addEventListener('change', function() {

        if (!firstClickedOptions[currentIndex]) {
          firstClickedOptions[currentIndex] = $("input[name='answer_" + currentIndex + "']:checked").val();
        }

        const selectedOption = this.value;
        const correctAnswer = this.getAttribute('data-correct');
        const vocabReadSpan = this.closest('.card').querySelector('.hiraText');
        vocabReadSpan.classList.remove('d-none');

        if (selectedOption === correctAnswer) {
          this.parentElement.classList.remove('text-danger');
          this.parentElement.classList.add('text-success');
        } else {
          this.parentElement.classList.remove('text-success');
          this.parentElement.classList.add('text-danger');
        }
        clearInterval(countdownInterval);
      });
    });

    $(".next-question").click(function() {
      progrssBarAnimation(20);
      triggerNextQuestion();
    });

    function triggerNextQuestion() {
      var vocabOrg = $("input[name='id_" + currentIndex + "']").val();
      var correctOption = $("input[name='answer_" + currentIndex + "']").data("correct");
      var selectedOption = firstClickedOptions[currentIndex];
      if(!selectedOption){
        selectedOption = "";
      }
      var mycardLevel = selectedOption === correctOption ? 1 : 0;
      if(mycardLevel == 1){
        totalCorrectAnswer = totalCorrectAnswer + 1;
      }

      $.ajax({
        url: '<%= url_for(action: :next_ques) %>',
        dataType: 'json',
        method: 'post',
        data: {
          authenticity_token: '<%= form_authenticity_token %>',
          id: vocabOrg,
          index: currentIndex,
          mycard_level: mycardLevel,
          correct_option: correctOption,
          selected_answer: selectedOption
        },
        success: function(data) {
        },
        error: function(xhr, status, error) {
          alert('An error occurred while submitting your answer');
        }
      });

      currentIndex++;
      if (currentIndex < totalQuestions) {
        showQuestion(currentIndex);
      }else{
        $('.progress').hide();
        clearInterval(countdownInterval);
        btnSubmit(currentIndex);
      }
    }

    function btnSubmit(currentIndex)  {

      $(".card").hide();

      var resultContainer = $(".result-container");
      resultContainer.show();

      var percentage_level_1 = (totalCorrectAnswer / totalCountOfQuestion) * 100;
      var roundedPercentage = parseFloat(percentage_level_1.toFixed(0));

      var msgForStudy = '';

      switch (true) {
          case roundedPercentage < 25:
              msgForStudy = "Keep practicing!";
              break;
          case roundedPercentage < 50:
              msgForStudy = "Keep working on it!";
              break;
          case roundedPercentage < 75:
              msgForStudy = "You're making progress!";
              break;
          case roundedPercentage < 90:
              msgForStudy = "Great job!";
              break;
          case roundedPercentage <= 100:
              msgForStudy = "Excellent work!";
              break;
          default:
              msgForStudy = "Invalid percentage. Please check your inputs.";
              break;
      }

      var content = '<div class="Content-result" style="text-align:center">';
      content += '<h1>Result:</h1>';
      content += totalCorrectAnswer + ' of ' + <%= @total_count %> + '<p><b>' + roundedPercentage + '%</b></p>';
      content += '<p>'+ msgForStudy + '</p>';
      content += '<%= link_to 'Try Again', quizes_path, class: 'btn btn-primary ' %>   ';
      content += '<%= link_to 'Back', menus_path, class: 'btn btn-primary' %>';
      content += '</div>';

      resultContainer.html(content);
    };

    showQuestion(currentIndex);
    function showQuestion(index) {
      resetCountdown();
      $(".card").hide();
      $(".card:eq(" + index + ")").show();
    }

    function progrssBarAnimation(barPercentage) {
      var percentageRemaining = (barPercentage / 20) * 100;
      $(".progress-bar").css("width", percentageRemaining + "%");
      $(".progress-bar").attr("aria-valuenow", percentageRemaining);

      // Remove existing classes
      $(".progress-bar").removeClass("bg-danger bg-warning bg-info");

      switch (true) {
        case percentageRemaining < 25:
          $(".progress-bar").addClass("bg-danger");
            break;
        case percentageRemaining < 50:
          $(".progress-bar").addClass("bg-warning");
            break;
        case percentageRemaining < 75:
            $(".progress-bar").addClass("bg-info");
            break;
        case percentageRemaining < 90:
           $(".progress-bar").addClass("bg-success");
            break;
        case percentageRemaining <= 100:
            $(".progress-bar").addClass("bg-success");
            break;
        default:
            $(".progress-bar").addClass("width", percentageRemaining + "%");
            break;
      }
    }

    function startCountdown() {
        var countdown = 20; // Initial countdown value in seconds
        clearInterval(countdownInterval);
        countdownInterval = setInterval(function() {
          countdown--;

            progrssBarAnimation(countdown);

            if (countdown < 0) {
              progrssBarAnimation(20);
              triggerNextQuestion();
            } else {
                $('#countdown_' + currentIndex).text(countdown);
            }
        }, 1000);
    }

    function resetCountdown() {
        clearInterval(countdownInterval);
        $('#countdown_' + currentIndex).text(20);
        startCountdown();
    }

  });
</script>
